# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  _fullname: String
  address: String!
  balance: BigInt!
  createdAt: DateTime!
  extrinsics: [Extrinsic!]!
  fire: BigInt!
  id: Float!
  isController: Boolean!
  isPayoutTarget: Boolean!
  isStash: Boolean!
  receivedRewards: [Reward!]!
  secretKeyHash: String
  stake: BigInt
  updatedAt: DateTime!
}

type AppState {
  _fullname: String
  data: String!
  id: ID!
}

scalar BigInt

enum ContainerState {
  InSync
  NotInitiated
  NotRunning
  Running
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum DateTimeInterval {
  D1
  D2
  H1
  H4
  H6
  H12
  M1
  W1
  W2
}

type DevicePartState {
  state: ContainerState
  syncProgress: Float
  temperature: Float
}

input DevicePartStateInput {
  state: ContainerState
  syncProgress: Float
  temperature: Float
}

type DeviceState {
  _fullname: String
  cpu: DevicePartState!
  host: DevicePartState!
  id: Float!
  node: DevicePartState
  runtime: DevicePartState!
  updatedAt: DateTime!
}

type Extrinsic {
  _fullname: String
  account: Account!
  action: String!
  date: DateTime!
  hash: String!
  id: ID!
  isSuccessful: Boolean
  rewards: [Reward!]!
}

type Miner {
  _fullname: String
  commission: Float
  confidenceLevel: Float
  controllerAccount: Account!
  createdAt: DateTime!
  deviceState: DeviceState
  fireMined: BigInt!
  id: Float!
  minedRewards: [Reward!]!
  payoutTarget: Account!
  runtimeVersion: Float
  score: Float
  stashAccount: Account!
  state: String
  updatedAt: DateTime!
}

type Mutation {
  setPayoutTargetSecretKey(payoutTargetAddress: String!, secretKey: String!, signature: String!): Account!
  updateMinerDeviceInfo(controllerAddress: String!, deviceState: UpdateDeviceStateInput!, secretKey: String!): DeviceState!
}

enum PayoutReason {
  Compute
  Online
}

type Query {
  getAccount(address: String!): Account
  getAccounts(ids: [Int!]!): [Account!]!
  getAppState: AppState!
  getMinerByController(address: String!): Miner
  getMinerRewards(groupBy: DateTimeInterval = D1, minerId: Int!, pagination: RewardChunkPagination = {itemsPerPage: 500, page: 1}): [RewardChunk!]!
  getMiners(ids: [Int!]!): [Miner!]!
  getMinersByPayoutTarget(address: String!): [Miner!]!
}

type Reward {
  _fullname: String
  date: DateTime!
  fire: BigInt!
  id: ID!
  reason: PayoutReason!
}

type RewardChunk {
  chunkStamp: Float!
  date: DateTime!
  reason: PayoutReason!
  rewardNumber: Float!
  rewardValue: BigInt!
}

input RewardChunkPagination {
  itemsPerPage: Int!
  page: Int!
}

input UpdateDeviceStateInput {
  cpu: DevicePartStateInput!
  host: DevicePartStateInput!
  node: DevicePartStateInput
  runtime: DevicePartStateInput!
}
